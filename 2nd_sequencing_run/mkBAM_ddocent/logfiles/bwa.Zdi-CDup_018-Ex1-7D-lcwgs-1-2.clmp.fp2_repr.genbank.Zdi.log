Looking to launch executable "/opt/conda/bin/bwa-meme_mode3.avx512bw", simd = _mode3.avx512bw
Launching executable "/opt/conda/bin/bwa-meme_mode3.avx512bw"
-----------------------------
Executing in AVX512 mode!!
-----------------------------
* SA compression enabled with xfactor: 8
* Ref file: reference.genbank.Zdi.fasta
* Entering FMI_search
Reading other elements of the index from files reference.genbank.Zdi.fasta
* Index prefix: reference.genbank.Zdi.fasta
* Read 0 ALT contigs
* Reading reference genome..
* Binary seq file = reference.genbank.Zdi.fasta.0123
* Reference genome size: 1379380954 bp
* Done reading reference genome !!

------------------------------------------
1. Memory pre-allocation for Chaining: 5679.4903 MB
2. Memory pre-allocation for BSW: 9584.6810 MB
[M::memoryAllocLearned::MEME] Reading Learned-index models into memory
[Learned-Config] MODE:3 SEARCH_METHOD: 1 MEM_TRADEOFF:1 EXPONENTIAL_SMEMSEARCH: 1 DEBUG_MODE:0 Num 2nd Models:268435456 PWL Bits Used:28
[M::memoryAllocLearned::MEME] Loading RMI model and Pac reference file took 10.721 sec
[M::memoryAllocLearned::MEME] Reading suffix array into memory
[M::memoryAllocLearned::MEME] Loading pos_packed file took 15.985 sec
[M::memoryAllocLearned::MEME] Generating SA, 64-bit Suffix and ISA in memory
[M::memoryAllocLearned::MEME] Runtime-build-index took 13.059 sec
3. Memory pre-allocation for BWT: 7540.2955 MB
------------------------------------------
* Threads used (compute): 40
* No. of pipeline threads: 2

[0000] read_chunk: 400000000, work_chunk_size: 400000117, nseq: 3241450
	[0000][ M::kt_pipeline] read 3241450 sequences (400000117 bp)...
[0000] Reallocating initial memory allocations!!
[0000] Calling mem_process_seqs.., task: 0
[0000] 1. Calling kt_for - worker_bwt
[0000] read_chunk: 400000000, work_chunk_size: 400000144, nseq: 3240062
	[0000][ M::kt_pipeline] read 3240062 sequences (400000144 bp)...
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3241450
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (78, 1215484, 79, 69)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (66, 132, 211)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 501)
[0000][PE] mean and std.dev: (118.21, 81.79)
[0000][PE] low and high boundaries for proper pairs: (1, 646)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (100, 140, 189)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 367)
[0000][PE] mean and std.dev: (148.75, 66.20)
[0000][PE] low and high boundaries for proper pairs: (1, 456)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (81, 219, 542)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 1464)
[0000][PE] mean and std.dev: (254.32, 255.74)
[0000][PE] low and high boundaries for proper pairs: (1, 1925)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (98, 154, 323)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 773)
[0000][PE] mean and std.dev: (175.87, 141.13)
[0000][PE] low and high boundaries for proper pairs: (1, 998)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 3241450 reads in 702.787 CPU sec, 18.272 real sec
[0000] Calling mem_process_seqs.., task: 1
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3240062
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (89, 1234405, 63, 74)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (68, 106, 173)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 383)
[0000][PE] mean and std.dev: (104.90, 66.07)
[0000][PE] low and high boundaries for proper pairs: (1, 488)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (100, 141, 189)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 367)
[0000][PE] mean and std.dev: (148.77, 66.22)
[0000][PE] low and high boundaries for proper pairs: (1, 456)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (56, 229, 667)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 1889)
[0000][PE] mean and std.dev: (282.94, 336.25)
[0000][PE] low and high boundaries for proper pairs: (1, 2500)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (80, 150, 247)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 581)
[0000][PE] mean and std.dev: (140.14, 101.39)
[0000][PE] low and high boundaries for proper pairs: (1, 748)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000256, nseq: 3232732
	[0000][ M::kt_pipeline] read 3232732 sequences (400000256 bp)...
	[0000][ M::mem_process_seqs] Processed 3240062 reads in 717.951 CPU sec, 18.974 real sec
[0000] Calling mem_process_seqs.., task: 2
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3232732
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (85, 1206703, 70, 93)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (82, 109, 323)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 805)
[0000][PE] mean and std.dev: (163.99, 137.24)
[0000][PE] low and high boundaries for proper pairs: (1, 1046)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (100, 140, 189)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 367)
[0000][PE] mean and std.dev: (148.78, 66.34)
[0000][PE] low and high boundaries for proper pairs: (1, 456)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (57, 263, 1894)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 5568)
[0000][PE] mean and std.dev: (1128.13, 1548.59)
[0000][PE] low and high boundaries for proper pairs: (1, 7405)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (80, 127, 230)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 530)
[0000][PE] mean and std.dev: (142.56, 113.34)
[0000][PE] low and high boundaries for proper pairs: (1, 680)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000252, nseq: 3232760
	[0000][ M::kt_pipeline] read 3232760 sequences (400000252 bp)...
	[0000][ M::mem_process_seqs] Processed 3232732 reads in 737.024 CPU sec, 19.501 real sec
[0000] Calling mem_process_seqs.., task: 3
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3232760
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (54, 1208113, 73, 83)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (69, 109, 208)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 486)
[0000][PE] mean and std.dev: (111.28, 80.15)
[0000][PE] low and high boundaries for proper pairs: (1, 625)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (100, 140, 189)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 367)
[0000][PE] mean and std.dev: (148.60, 66.17)
[0000][PE] low and high boundaries for proper pairs: (1, 456)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (57, 268, 1108)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3210)
[0000][PE] mean and std.dev: (549.71, 707.19)
[0000][PE] low and high boundaries for proper pairs: (1, 4261)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (96, 141, 223)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 477)
[0000][PE] mean and std.dev: (141.90, 78.87)
[0000][PE] low and high boundaries for proper pairs: (1, 604)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000221, nseq: 3240646
	[0000][ M::kt_pipeline] read 3240646 sequences (400000221 bp)...
	[0000][ M::mem_process_seqs] Processed 3232760 reads in 756.877 CPU sec, 20.009 real sec
[0000] Calling mem_process_seqs.., task: 4
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3240646
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (62, 1222270, 91, 82)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (86, 134, 249)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 575)
[0000][PE] mean and std.dev: (139.31, 92.91)
[0000][PE] low and high boundaries for proper pairs: (1, 738)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (100, 140, 189)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 367)
[0000][PE] mean and std.dev: (148.74, 66.23)
[0000][PE] low and high boundaries for proper pairs: (1, 456)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (87, 289, 1519)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 4383)
[0000][PE] mean and std.dev: (742.22, 963.46)
[0000][PE] low and high boundaries for proper pairs: (1, 5815)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (78, 120, 169)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 351)
[0000][PE] mean and std.dev: (119.35, 68.31)
[0000][PE] low and high boundaries for proper pairs: (1, 442)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000133, nseq: 3238804
	[0000][ M::kt_pipeline] read 3238804 sequences (400000133 bp)...
	[0000][ M::mem_process_seqs] Processed 3240646 reads in 740.365 CPU sec, 19.504 real sec
[0000] Calling mem_process_seqs.., task: 5
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3238804
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (72, 1219580, 71, 73)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (86, 136, 204)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 440)
[0000][PE] mean and std.dev: (123.63, 71.97)
[0000][PE] low and high boundaries for proper pairs: (1, 558)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (100, 140, 189)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 367)
[0000][PE] mean and std.dev: (148.52, 66.36)
[0000][PE] low and high boundaries for proper pairs: (1, 456)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (63, 212, 1114)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3216)
[0000][PE] mean and std.dev: (548.02, 775.70)
[0000][PE] low and high boundaries for proper pairs: (1, 4267)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (79, 123, 180)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 382)
[0000][PE] mean and std.dev: (106.43, 54.22)
[0000][PE] low and high boundaries for proper pairs: (1, 483)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000039, nseq: 3243330
	[0000][ M::kt_pipeline] read 3243330 sequences (400000039 bp)...
	[0000][ M::mem_process_seqs] Processed 3238804 reads in 730.484 CPU sec, 19.108 real sec
[0000] Reallocating initial memory allocations!!
[0000] Calling mem_process_seqs.., task: 6
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] read_chunk: 400000000, work_chunk_size: 400000156, nseq: 3224074
	[0000][ M::kt_pipeline] read 3224074 sequences (400000156 bp)...
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3243330
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (66, 1234253, 84, 91)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (97, 141, 272)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 622)
[0000][PE] mean and std.dev: (147.40, 106.81)
[0000][PE] low and high boundaries for proper pairs: (1, 797)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (100, 140, 189)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 367)
[0000][PE] mean and std.dev: (148.77, 66.32)
[0000][PE] low and high boundaries for proper pairs: (1, 456)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (86, 270, 1087)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3089)
[0000][PE] mean and std.dev: (443.09, 494.96)
[0000][PE] low and high boundaries for proper pairs: (1, 4090)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (80, 127, 284)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 692)
[0000][PE] mean and std.dev: (155.87, 124.49)
[0000][PE] low and high boundaries for proper pairs: (1, 896)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 3243330 reads in 716.294 CPU sec, 18.539 real sec
[0000] Calling mem_process_seqs.., task: 7
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3224074
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (66, 1195239, 79, 78)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (74, 114, 197)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 443)
[0000][PE] mean and std.dev: (121.39, 70.00)
[0000][PE] low and high boundaries for proper pairs: (1, 566)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (100, 141, 189)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 367)
[0000][PE] mean and std.dev: (148.81, 66.24)
[0000][PE] low and high boundaries for proper pairs: (1, 456)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (58, 174, 463)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 1273)
[0000][PE] mean and std.dev: (201.67, 242.01)
[0000][PE] low and high boundaries for proper pairs: (1, 1678)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (87, 126, 189)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 393)
[0000][PE] mean and std.dev: (124.99, 65.94)
[0000][PE] low and high boundaries for proper pairs: (1, 495)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000255, nseq: 3234578
	[0000][ M::kt_pipeline] read 3234578 sequences (400000255 bp)...
	[0000][ M::mem_process_seqs] Processed 3224074 reads in 738.865 CPU sec, 19.322 real sec
[0000] Calling mem_process_seqs.., task: 8
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3234578
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (91, 1203798, 79, 69)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (80, 123, 191)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 413)
[0000][PE] mean and std.dev: (119.50, 57.31)
[0000][PE] low and high boundaries for proper pairs: (1, 524)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (100, 140, 189)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 367)
[0000][PE] mean and std.dev: (148.80, 66.26)
[0000][PE] low and high boundaries for proper pairs: (1, 456)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (64, 148, 789)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 2239)
[0000][PE] mean and std.dev: (412.77, 574.57)
[0000][PE] low and high boundaries for proper pairs: (1, 2964)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (75, 134, 287)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 711)
[0000][PE] mean and std.dev: (120.78, 69.81)
[0000][PE] low and high boundaries for proper pairs: (1, 923)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 232453733, nseq: 1880032
	[0000][ M::kt_pipeline] read 1880032 sequences (232453733 bp)...
	[0000][ M::mem_process_seqs] Processed 3234578 reads in 755.340 CPU sec, 19.967 real sec
[0000] Calling mem_process_seqs.., task: 9
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] read_chunk: 400000000, work_chunk_size: 0, nseq: 0
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 1880032
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (34, 698750, 36, 45)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (76, 110, 374)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 970)
[0000][PE] mean and std.dev: (162.48, 155.55)
[0000][PE] low and high boundaries for proper pairs: (1, 1268)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (100, 141, 189)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 367)
[0000][PE] mean and std.dev: (148.92, 66.24)
[0000][PE] low and high boundaries for proper pairs: (1, 456)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (107, 192, 358)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 860)
[0000][PE] mean and std.dev: (172.41, 121.89)
[0000][PE] low and high boundaries for proper pairs: (1, 1111)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (85, 140, 208)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 454)
[0000][PE] mean and std.dev: (131.93, 66.12)
[0000][PE] low and high boundaries for proper pairs: (1, 577)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 1880032 reads in 431.562 CPU sec, 11.626 real sec
[0000] read_chunk: 400000000, work_chunk_size: 0, nseq: 0
[0000] Computation ends..
No. of OMP threads: 40
Processor is running @2394.729692 MHz
Runtime profile:

	Time taken for main_mem function: 240.71 sec

	IO times (sec) :
	Reading IO time (reads) avg: 100.98, (100.98, 100.98)
	Writing IO time (SAM) avg: 42.31, (42.31, 42.31)
	Reading IO time (Reference Genome) avg: 0.91, (0.91, 0.91)
	Index read time avg: 0.25, (0.25, 0.25)

	Overall time (sec) (Excluding Index reading time):
	PROCESS() (Total compute time + (read + SAM) IO time) : 239.50
	MEM_PROCESS_SEQ() (Total compute time (Kernel + SAM)), avg: 184.80, (184.80, 184.80)

	 SAM Processing time (sec):
	--WORKER_SAM avg: 89.86, (89.86, 89.86)

	Kernels' compute time (sec):
	Total kernel (smem+sal+bsw) time avg: 91.78, (91.78, 91.78)
		MEM_ALN_CHAIN_FLT avg: 0.00, (0.00, 0.00)
		MEM_ALN_CHAIN_SEED avg: 0.00, (0.00, 0.00)
		ERT_SEED_CHAIN avg: 0.00, (0.00, 0.00)
	LEARNED_SEED_CHAIN avg: 40.85, (40.97, 40.75)
		SMEM compute avg: 0.00, (0.00, 0.00)
		SAL compute avg: 0.00, (0.00, 0.00)
				MEM_SA avg: 0.00, (0.00, 0.00)

		BSW time, avg: 48.73, (49.00, 48.49)

Important parameter settings: 
	BATCH_SIZE: 512
	MAX_SEQ_LEN_REF: 256
	MAX_SEQ_LEN_QER: 128
	MAX_SEQ_LEN8: 128
	SEEDS_PER_READ: 500
	SIMD_WIDTH8 X: 64
	SIMD_WIDTH16 X: 32
	AVG_SEEDS_PER_READ: 64
