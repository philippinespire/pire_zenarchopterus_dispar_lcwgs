Looking to launch executable "/opt/conda/bin/bwa-meme_mode3.avx512bw", simd = _mode3.avx512bw
Launching executable "/opt/conda/bin/bwa-meme_mode3.avx512bw"
-----------------------------
Executing in AVX512 mode!!
-----------------------------
* SA compression enabled with xfactor: 8
* Ref file: reference.genbank.Zdi.fasta
* Entering FMI_search
Reading other elements of the index from files reference.genbank.Zdi.fasta
* Index prefix: reference.genbank.Zdi.fasta
* Read 0 ALT contigs
* Reading reference genome..
* Binary seq file = reference.genbank.Zdi.fasta.0123
* Reference genome size: 1379380954 bp
* Done reading reference genome !!

------------------------------------------
1. Memory pre-allocation for Chaining: 5679.4903 MB
2. Memory pre-allocation for BSW: 9584.6810 MB
[M::memoryAllocLearned::MEME] Reading Learned-index models into memory
[Learned-Config] MODE:3 SEARCH_METHOD: 1 MEM_TRADEOFF:1 EXPONENTIAL_SMEMSEARCH: 1 DEBUG_MODE:0 Num 2nd Models:268435456 PWL Bits Used:28
[M::memoryAllocLearned::MEME] Loading RMI model and Pac reference file took 10.942 sec
[M::memoryAllocLearned::MEME] Reading suffix array into memory
[M::memoryAllocLearned::MEME] Loading pos_packed file took 16.355 sec
[M::memoryAllocLearned::MEME] Generating SA, 64-bit Suffix and ISA in memory
[M::memoryAllocLearned::MEME] Runtime-build-index took 13.203 sec
3. Memory pre-allocation for BWT: 7540.2955 MB
------------------------------------------
* Threads used (compute): 40
* No. of pipeline threads: 2

[0000] read_chunk: 400000000, work_chunk_size: 400000090, nseq: 3269062
	[0000][ M::kt_pipeline] read 3269062 sequences (400000090 bp)...
[0000] Reallocating initial memory allocations!!
[0000] Calling mem_process_seqs.., task: 0
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] read_chunk: 400000000, work_chunk_size: 400000260, nseq: 3264386
	[0000][ M::kt_pipeline] read 3264386 sequences (400000260 bp)...
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3269062
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (201, 1283446, 62, 248)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (68, 106, 167)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 365)
[0000][PE] mean and std.dev: (112.22, 64.61)
[0000][PE] low and high boundaries for proper pairs: (1, 464)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (98, 131, 173)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 323)
[0000][PE] mean and std.dev: (138.80, 56.48)
[0000][PE] low and high boundaries for proper pairs: (1, 398)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (45, 190, 574)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 1632)
[0000][PE] mean and std.dev: (306.65, 409.52)
[0000][PE] low and high boundaries for proper pairs: (1, 2161)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (79, 107, 161)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 325)
[0000][PE] mean and std.dev: (115.47, 57.97)
[0000][PE] low and high boundaries for proper pairs: (1, 407)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 3269062 reads in 715.259 CPU sec, 18.510 real sec
[0000] Calling mem_process_seqs.., task: 1
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3264386
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (196, 1272525, 80, 234)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (75, 106, 163)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 339)
[0000][PE] mean and std.dev: (108.23, 56.98)
[0000][PE] low and high boundaries for proper pairs: (1, 427)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (98, 131, 173)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 323)
[0000][PE] mean and std.dev: (138.89, 56.46)
[0000][PE] low and high boundaries for proper pairs: (1, 398)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (40, 133, 376)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 1048)
[0000][PE] mean and std.dev: (168.33, 180.93)
[0000][PE] low and high boundaries for proper pairs: (1, 1384)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (75, 120, 170)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 360)
[0000][PE] mean and std.dev: (122.82, 63.02)
[0000][PE] low and high boundaries for proper pairs: (1, 455)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000040, nseq: 3266628
	[0000][ M::kt_pipeline] read 3266628 sequences (400000040 bp)...
	[0000][ M::mem_process_seqs] Processed 3264386 reads in 737.758 CPU sec, 19.425 real sec
[0000] Calling mem_process_seqs.., task: 2
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3266628
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (202, 1269297, 52, 256)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (75, 109, 167)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 351)
[0000][PE] mean and std.dev: (114.65, 62.93)
[0000][PE] low and high boundaries for proper pairs: (1, 443)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (98, 131, 173)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 323)
[0000][PE] mean and std.dev: (138.87, 56.43)
[0000][PE] low and high boundaries for proper pairs: (1, 398)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (67, 228, 585)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 1621)
[0000][PE] mean and std.dev: (339.68, 418.15)
[0000][PE] low and high boundaries for proper pairs: (1, 2139)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (88, 126, 175)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 349)
[0000][PE] mean and std.dev: (122.71, 58.45)
[0000][PE] low and high boundaries for proper pairs: (1, 436)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000263, nseq: 3267118
	[0000][ M::kt_pipeline] read 3267118 sequences (400000263 bp)...
	[0000][ M::mem_process_seqs] Processed 3266628 reads in 740.443 CPU sec, 19.406 real sec
[0000] Calling mem_process_seqs.., task: 3
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3267118
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (207, 1275860, 47, 230)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (72, 105, 157)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 327)
[0000][PE] mean and std.dev: (105.46, 55.75)
[0000][PE] low and high boundaries for proper pairs: (1, 412)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (98, 131, 173)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 323)
[0000][PE] mean and std.dev: (138.93, 56.47)
[0000][PE] low and high boundaries for proper pairs: (1, 398)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (60, 248, 1884)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 5532)
[0000][PE] mean and std.dev: (975.42, 1348.15)
[0000][PE] low and high boundaries for proper pairs: (1, 7356)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (77, 117, 173)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 365)
[0000][PE] mean and std.dev: (113.30, 57.04)
[0000][PE] low and high boundaries for proper pairs: (1, 461)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000111, nseq: 3264928
	[0000][ M::kt_pipeline] read 3264928 sequences (400000111 bp)...
	[0000][ M::mem_process_seqs] Processed 3267118 reads in 741.900 CPU sec, 19.416 real sec
[0000] Calling mem_process_seqs.., task: 4
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3264928
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (169, 1266375, 83, 215)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (75, 109, 171)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 363)
[0000][PE] mean and std.dev: (120.40, 69.31)
[0000][PE] low and high boundaries for proper pairs: (1, 459)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (98, 131, 173)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 323)
[0000][PE] mean and std.dev: (138.74, 56.48)
[0000][PE] low and high boundaries for proper pairs: (1, 398)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (51, 139, 542)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 1524)
[0000][PE] mean and std.dev: (279.31, 363.78)
[0000][PE] low and high boundaries for proper pairs: (1, 2015)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (75, 109, 169)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 357)
[0000][PE] mean and std.dev: (111.19, 59.30)
[0000][PE] low and high boundaries for proper pairs: (1, 451)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000162, nseq: 3267444
	[0000][ M::kt_pipeline] read 3267444 sequences (400000162 bp)...
	[0000][ M::mem_process_seqs] Processed 3264928 reads in 739.684 CPU sec, 19.508 real sec
[0000] Calling mem_process_seqs.., task: 5
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3267444
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (187, 1277488, 71, 207)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (70, 111, 166)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 358)
[0000][PE] mean and std.dev: (114.57, 61.76)
[0000][PE] low and high boundaries for proper pairs: (1, 454)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (98, 131, 173)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 323)
[0000][PE] mean and std.dev: (138.82, 56.29)
[0000][PE] low and high boundaries for proper pairs: (1, 398)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (51, 228, 1095)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3183)
[0000][PE] mean and std.dev: (453.68, 621.10)
[0000][PE] low and high boundaries for proper pairs: (1, 4227)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (81, 118, 167)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 339)
[0000][PE] mean and std.dev: (119.69, 54.31)
[0000][PE] low and high boundaries for proper pairs: (1, 425)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000140, nseq: 3252366
	[0000][ M::kt_pipeline] read 3252366 sequences (400000140 bp)...
	[0000][ M::mem_process_seqs] Processed 3267444 reads in 734.799 CPU sec, 19.410 real sec
[0000] Calling mem_process_seqs.., task: 6
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] read_chunk: 400000000, work_chunk_size: 190494590, nseq: 1553968
	[0000][ M::kt_pipeline] read 1553968 sequences (190494590 bp)...
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3252366
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (184, 1218432, 64, 232)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (78, 113, 163)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 333)
[0000][PE] mean and std.dev: (114.33, 55.90)
[0000][PE] low and high boundaries for proper pairs: (1, 418)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (98, 131, 173)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 323)
[0000][PE] mean and std.dev: (138.77, 56.46)
[0000][PE] low and high boundaries for proper pairs: (1, 398)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (110, 195, 1097)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3071)
[0000][PE] mean and std.dev: (533.82, 770.88)
[0000][PE] low and high boundaries for proper pairs: (1, 4058)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (76, 109, 155)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 313)
[0000][PE] mean and std.dev: (117.05, 59.73)
[0000][PE] low and high boundaries for proper pairs: (1, 392)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 3252366 reads in 787.121 CPU sec, 20.602 real sec
[0000] Calling mem_process_seqs.., task: 7
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] read_chunk: 400000000, work_chunk_size: 0, nseq: 0
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 1553968
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (88, 593180, 41, 113)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (68, 93, 166)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 362)
[0000][PE] mean and std.dev: (103.38, 61.28)
[0000][PE] low and high boundaries for proper pairs: (1, 460)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (98, 131, 173)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 323)
[0000][PE] mean and std.dev: (138.91, 56.45)
[0000][PE] low and high boundaries for proper pairs: (1, 398)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (59, 127, 392)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 1058)
[0000][PE] mean and std.dev: (168.89, 165.80)
[0000][PE] low and high boundaries for proper pairs: (1, 1391)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (79, 117, 166)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 340)
[0000][PE] mean and std.dev: (120.53, 57.01)
[0000][PE] low and high boundaries for proper pairs: (1, 427)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 1553968 reads in 363.404 CPU sec, 9.937 real sec
[0000] read_chunk: 400000000, work_chunk_size: 0, nseq: 0
[0000] Computation ends..
No. of OMP threads: 40
Processor is running @2394.727792 MHz
Runtime profile:

	Time taken for main_mem function: 199.85 sec

	IO times (sec) :
	Reading IO time (reads) avg: 82.48, (82.48, 82.48)
	Writing IO time (SAM) avg: 37.00, (37.00, 37.00)
	Reading IO time (Reference Genome) avg: 1.20, (1.20, 1.20)
	Index read time avg: 0.37, (0.37, 0.37)

	Overall time (sec) (Excluding Index reading time):
	PROCESS() (Total compute time + (read + SAM) IO time) : 198.24
	MEM_PROCESS_SEQ() (Total compute time (Kernel + SAM)), avg: 146.19, (146.19, 146.19)

	 SAM Processing time (sec):
	--WORKER_SAM avg: 70.46, (70.46, 70.46)

	Kernels' compute time (sec):
	Total kernel (smem+sal+bsw) time avg: 73.16, (73.16, 73.16)
		MEM_ALN_CHAIN_FLT avg: 0.00, (0.00, 0.00)
		MEM_ALN_CHAIN_SEED avg: 0.00, (0.00, 0.00)
		ERT_SEED_CHAIN avg: 0.00, (0.00, 0.00)
	LEARNED_SEED_CHAIN avg: 32.64, (32.69, 32.57)
		SMEM compute avg: 0.00, (0.00, 0.00)
		SAL compute avg: 0.00, (0.00, 0.00)
				MEM_SA avg: 0.00, (0.00, 0.00)

		BSW time, avg: 38.80, (38.93, 38.65)

Important parameter settings: 
	BATCH_SIZE: 512
	MAX_SEQ_LEN_REF: 256
	MAX_SEQ_LEN_QER: 128
	MAX_SEQ_LEN8: 128
	SEEDS_PER_READ: 500
	SIMD_WIDTH8 X: 64
	SIMD_WIDTH16 X: 32
	AVG_SEEDS_PER_READ: 64
