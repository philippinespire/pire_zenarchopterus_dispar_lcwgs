Looking to launch executable "/opt/conda/bin/bwa-meme_mode3.avx512bw", simd = _mode3.avx512bw
Launching executable "/opt/conda/bin/bwa-meme_mode3.avx512bw"
-----------------------------
Executing in AVX512 mode!!
-----------------------------
* SA compression enabled with xfactor: 8
* Ref file: reference.genbank.Zdi.fasta
* Entering FMI_search
Reading other elements of the index from files reference.genbank.Zdi.fasta
* Index prefix: reference.genbank.Zdi.fasta
* Read 0 ALT contigs
* Reading reference genome..
* Binary seq file = reference.genbank.Zdi.fasta.0123
* Reference genome size: 1379380954 bp
* Done reading reference genome !!

------------------------------------------
1. Memory pre-allocation for Chaining: 5679.4903 MB
2. Memory pre-allocation for BSW: 9584.6810 MB
[M::memoryAllocLearned::MEME] Reading Learned-index models into memory
[Learned-Config] MODE:3 SEARCH_METHOD: 1 MEM_TRADEOFF:1 EXPONENTIAL_SMEMSEARCH: 1 DEBUG_MODE:0 Num 2nd Models:268435456 PWL Bits Used:28
[M::memoryAllocLearned::MEME] Loading RMI model and Pac reference file took 10.685 sec
[M::memoryAllocLearned::MEME] Reading suffix array into memory
[M::memoryAllocLearned::MEME] Loading pos_packed file took 15.746 sec
[M::memoryAllocLearned::MEME] Generating SA, 64-bit Suffix and ISA in memory
[M::memoryAllocLearned::MEME] Runtime-build-index took 13.104 sec
3. Memory pre-allocation for BWT: 7540.2955 MB
------------------------------------------
* Threads used (compute): 40
* No. of pipeline threads: 2

[0000] read_chunk: 400000000, work_chunk_size: 400000237, nseq: 3122198
	[0000][ M::kt_pipeline] read 3122198 sequences (400000237 bp)...
[0000] Reallocating initial memory allocations!!
[0000] Calling mem_process_seqs.., task: 0
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] read_chunk: 400000000, work_chunk_size: 400000207, nseq: 3125628
	[0000][ M::kt_pipeline] read 3125628 sequences (400000207 bp)...
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3122198
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (101, 1228104, 85, 136)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (82, 126, 215)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 481)
[0000][PE] mean and std.dev: (127.30, 79.36)
[0000][PE] low and high boundaries for proper pairs: (1, 614)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 199)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 379)
[0000][PE] mean and std.dev: (158.14, 67.15)
[0000][PE] low and high boundaries for proper pairs: (1, 469)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (58, 191, 660)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 1864)
[0000][PE] mean and std.dev: (320.39, 429.40)
[0000][PE] low and high boundaries for proper pairs: (1, 2466)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (79, 124, 205)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 457)
[0000][PE] mean and std.dev: (124.54, 71.87)
[0000][PE] low and high boundaries for proper pairs: (1, 583)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 3122198 reads in 750.949 CPU sec, 19.532 real sec
[0000] Reallocating initial memory allocations!!
[0000] Calling mem_process_seqs.., task: 1
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] read_chunk: 400000000, work_chunk_size: 400000282, nseq: 3120856
	[0000][ M::kt_pipeline] read 3120856 sequences (400000282 bp)...
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3125628
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (107, 1232346, 70, 116)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (100, 152, 218)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 454)
[0000][PE] mean and std.dev: (148.88, 78.71)
[0000][PE] low and high boundaries for proper pairs: (1, 572)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 382)
[0000][PE] mean and std.dev: (158.48, 67.41)
[0000][PE] low and high boundaries for proper pairs: (1, 473)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (51, 193, 1159)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3375)
[0000][PE] mean and std.dev: (569.43, 730.36)
[0000][PE] low and high boundaries for proper pairs: (1, 4483)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (77, 116, 177)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 377)
[0000][PE] mean and std.dev: (116.25, 61.23)
[0000][PE] low and high boundaries for proper pairs: (1, 477)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 3125628 reads in 741.828 CPU sec, 19.150 real sec
[0000] Calling mem_process_seqs.., task: 2
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3120856
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (105, 1236971, 74, 137)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (85, 117, 182)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 376)
[0000][PE] mean and std.dev: (115.08, 56.58)
[0000][PE] low and high boundaries for proper pairs: (1, 473)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (110, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 380)
[0000][PE] mean and std.dev: (158.52, 67.26)
[0000][PE] low and high boundaries for proper pairs: (1, 470)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (65, 233, 1092)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3146)
[0000][PE] mean and std.dev: (620.49, 784.12)
[0000][PE] low and high boundaries for proper pairs: (1, 4173)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (86, 128, 194)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 410)
[0000][PE] mean and std.dev: (129.61, 61.08)
[0000][PE] low and high boundaries for proper pairs: (1, 518)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000229, nseq: 3117212
	[0000][ M::kt_pipeline] read 3117212 sequences (400000229 bp)...
	[0000][ M::mem_process_seqs] Processed 3120856 reads in 755.984 CPU sec, 19.847 real sec
[0000] Calling mem_process_seqs.., task: 3
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3117212
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (107, 1212064, 89, 136)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (80, 125, 238)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 554)
[0000][PE] mean and std.dev: (151.32, 113.78)
[0000][PE] low and high boundaries for proper pairs: (1, 712)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 382)
[0000][PE] mean and std.dev: (158.50, 67.36)
[0000][PE] low and high boundaries for proper pairs: (1, 473)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (142, 530, 1891)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 5389)
[0000][PE] mean and std.dev: (967.54, 1202.10)
[0000][PE] low and high boundaries for proper pairs: (1, 7138)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (81, 124, 194)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 420)
[0000][PE] mean and std.dev: (129.75, 79.69)
[0000][PE] low and high boundaries for proper pairs: (1, 533)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000146, nseq: 3121118
	[0000][ M::kt_pipeline] read 3121118 sequences (400000146 bp)...
	[0000][ M::mem_process_seqs] Processed 3117212 reads in 777.342 CPU sec, 20.368 real sec
[0000] Calling mem_process_seqs.., task: 4
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3121118
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (129, 1216328, 78, 136)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (87, 134, 240)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 546)
[0000][PE] mean and std.dev: (153.47, 98.90)
[0000][PE] low and high boundaries for proper pairs: (1, 699)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (110, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 380)
[0000][PE] mean and std.dev: (158.59, 67.32)
[0000][PE] low and high boundaries for proper pairs: (1, 470)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (56, 185, 808)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 2312)
[0000][PE] mean and std.dev: (354.66, 528.87)
[0000][PE] low and high boundaries for proper pairs: (1, 3064)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (87, 120, 193)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 405)
[0000][PE] mean and std.dev: (121.43, 60.22)
[0000][PE] low and high boundaries for proper pairs: (1, 511)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000187, nseq: 3114996
	[0000][ M::kt_pipeline] read 3114996 sequences (400000187 bp)...
	[0000][ M::mem_process_seqs] Processed 3121118 reads in 777.150 CPU sec, 20.389 real sec
[0000] Calling mem_process_seqs.., task: 5
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3114996
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (117, 1206521, 100, 148)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (83, 124, 217)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 485)
[0000][PE] mean and std.dev: (127.09, 70.98)
[0000][PE] low and high boundaries for proper pairs: (1, 619)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 199)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 379)
[0000][PE] mean and std.dev: (158.21, 67.25)
[0000][PE] low and high boundaries for proper pairs: (1, 469)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (51, 279, 1328)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3882)
[0000][PE] mean and std.dev: (619.05, 846.72)
[0000][PE] low and high boundaries for proper pairs: (1, 5159)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (97, 140, 218)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 460)
[0000][PE] mean and std.dev: (141.59, 73.38)
[0000][PE] low and high boundaries for proper pairs: (1, 581)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000163, nseq: 3122182
	[0000][ M::kt_pipeline] read 3122182 sequences (400000163 bp)...
	[0000][ M::mem_process_seqs] Processed 3114996 reads in 790.367 CPU sec, 20.769 real sec
[0000] Calling mem_process_seqs.., task: 6
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3122182
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (99, 1210909, 55, 119)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (98, 136, 214)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 446)
[0000][PE] mean and std.dev: (144.21, 81.36)
[0000][PE] low and high boundaries for proper pairs: (1, 562)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 382)
[0000][PE] mean and std.dev: (158.53, 67.42)
[0000][PE] low and high boundaries for proper pairs: (1, 473)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (107, 288, 1905)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 5501)
[0000][PE] mean and std.dev: (952.15, 1407.48)
[0000][PE] low and high boundaries for proper pairs: (1, 7299)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (78, 107, 165)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 339)
[0000][PE] mean and std.dev: (113.41, 55.17)
[0000][PE] low and high boundaries for proper pairs: (1, 426)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000004, nseq: 3122260
	[0000][ M::kt_pipeline] read 3122260 sequences (400000004 bp)...
	[0000][ M::mem_process_seqs] Processed 3122182 reads in 812.416 CPU sec, 21.294 real sec
[0000] Calling mem_process_seqs.., task: 7
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3122260
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (114, 1227522, 107, 132)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (67, 120, 208)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 490)
[0000][PE] mean and std.dev: (132.69, 99.23)
[0000][PE] low and high boundaries for proper pairs: (1, 631)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 382)
[0000][PE] mean and std.dev: (158.54, 67.35)
[0000][PE] low and high boundaries for proper pairs: (1, 473)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (129, 625, 1153)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3201)
[0000][PE] mean and std.dev: (658.67, 710.76)
[0000][PE] low and high boundaries for proper pairs: (1, 4225)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (87, 135, 209)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 453)
[0000][PE] mean and std.dev: (132.06, 69.26)
[0000][PE] low and high boundaries for proper pairs: (1, 575)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000207, nseq: 3120768
	[0000][ M::kt_pipeline] read 3120768 sequences (400000207 bp)...
	[0000][ M::mem_process_seqs] Processed 3122260 reads in 772.572 CPU sec, 20.314 real sec
[0000] Calling mem_process_seqs.., task: 8
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3120768
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (102, 1219990, 91, 121)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (82, 118, 199)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 433)
[0000][PE] mean and std.dev: (134.77, 75.91)
[0000][PE] low and high boundaries for proper pairs: (1, 550)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 382)
[0000][PE] mean and std.dev: (158.37, 67.51)
[0000][PE] low and high boundaries for proper pairs: (1, 473)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (132, 342, 1106)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3054)
[0000][PE] mean and std.dev: (594.25, 614.52)
[0000][PE] low and high boundaries for proper pairs: (1, 4028)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (92, 120, 216)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 464)
[0000][PE] mean and std.dev: (131.79, 75.14)
[0000][PE] low and high boundaries for proper pairs: (1, 588)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000207, nseq: 3120374
	[0000][ M::kt_pipeline] read 3120374 sequences (400000207 bp)...
	[0000][ M::mem_process_seqs] Processed 3120768 reads in 766.875 CPU sec, 20.353 real sec
[0000] Calling mem_process_seqs.., task: 9
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3120374
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (114, 1225619, 88, 133)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (75, 121, 197)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 441)
[0000][PE] mean and std.dev: (129.28, 79.15)
[0000][PE] low and high boundaries for proper pairs: (1, 563)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 382)
[0000][PE] mean and std.dev: (158.56, 67.35)
[0000][PE] low and high boundaries for proper pairs: (1, 473)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (54, 176, 1150)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3342)
[0000][PE] mean and std.dev: (518.30, 782.09)
[0000][PE] low and high boundaries for proper pairs: (1, 4438)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (93, 147, 253)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 573)
[0000][PE] mean and std.dev: (173.62, 122.20)
[0000][PE] low and high boundaries for proper pairs: (1, 733)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000173, nseq: 3123476
	[0000][ M::kt_pipeline] read 3123476 sequences (400000173 bp)...
	[0000][ M::mem_process_seqs] Processed 3120374 reads in 764.501 CPU sec, 20.124 real sec
[0000] Calling mem_process_seqs.., task: 10
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3123476
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (107, 1234778, 96, 134)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (82, 134, 215)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 481)
[0000][PE] mean and std.dev: (137.83, 87.76)
[0000][PE] low and high boundaries for proper pairs: (1, 614)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 382)
[0000][PE] mean and std.dev: (158.60, 67.41)
[0000][PE] low and high boundaries for proper pairs: (1, 473)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (112, 442, 1155)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3241)
[0000][PE] mean and std.dev: (665.24, 729.20)
[0000][PE] low and high boundaries for proper pairs: (1, 4284)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (86, 126, 190)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 398)
[0000][PE] mean and std.dev: (133.64, 70.98)
[0000][PE] low and high boundaries for proper pairs: (1, 502)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000205, nseq: 3117988
	[0000][ M::kt_pipeline] read 3117988 sequences (400000205 bp)...
	[0000][ M::mem_process_seqs] Processed 3123476 reads in 765.154 CPU sec, 20.088 real sec
[0000] Calling mem_process_seqs.., task: 11
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3117988
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (119, 1226714, 105, 129)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (79, 116, 214)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 484)
[0000][PE] mean and std.dev: (128.44, 78.31)
[0000][PE] low and high boundaries for proper pairs: (1, 619)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 382)
[0000][PE] mean and std.dev: (158.41, 67.19)
[0000][PE] low and high boundaries for proper pairs: (1, 473)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (77, 253, 663)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 1835)
[0000][PE] mean and std.dev: (317.31, 396.63)
[0000][PE] low and high boundaries for proper pairs: (1, 2421)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (87, 125, 194)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 408)
[0000][PE] mean and std.dev: (130.26, 69.39)
[0000][PE] low and high boundaries for proper pairs: (1, 515)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000231, nseq: 3111552
	[0000][ M::kt_pipeline] read 3111552 sequences (400000231 bp)...
	[0000][ M::mem_process_seqs] Processed 3117988 reads in 751.681 CPU sec, 19.694 real sec
[0000] Calling mem_process_seqs.., task: 12
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3111552
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (81, 1171510, 92, 136)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (87, 119, 179)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 363)
[0000][PE] mean and std.dev: (122.95, 56.80)
[0000][PE] low and high boundaries for proper pairs: (1, 455)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 382)
[0000][PE] mean and std.dev: (158.28, 67.27)
[0000][PE] low and high boundaries for proper pairs: (1, 473)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (78, 365, 1113)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3183)
[0000][PE] mean and std.dev: (547.65, 614.32)
[0000][PE] low and high boundaries for proper pairs: (1, 4218)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (88, 128, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 424)
[0000][PE] mean and std.dev: (132.98, 71.04)
[0000][PE] low and high boundaries for proper pairs: (1, 536)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000144, nseq: 3122174
	[0000][ M::kt_pipeline] read 3122174 sequences (400000144 bp)...
	[0000][ M::mem_process_seqs] Processed 3111552 reads in 819.345 CPU sec, 21.479 real sec
[0000] Calling mem_process_seqs.., task: 13
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3122174
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (120, 1223107, 92, 116)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (87, 125, 188)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 390)
[0000][PE] mean and std.dev: (130.32, 67.54)
[0000][PE] low and high boundaries for proper pairs: (1, 491)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 382)
[0000][PE] mean and std.dev: (158.49, 67.34)
[0000][PE] low and high boundaries for proper pairs: (1, 473)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (50, 179, 1095)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 3185)
[0000][PE] mean and std.dev: (483.62, 723.45)
[0000][PE] low and high boundaries for proper pairs: (1, 4230)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (88, 139, 197)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 415)
[0000][PE] mean and std.dev: (133.17, 71.56)
[0000][PE] low and high boundaries for proper pairs: (1, 524)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
[0000] read_chunk: 400000000, work_chunk_size: 400000286, nseq: 3121616
	[0000][ M::kt_pipeline] read 3121616 sequences (400000286 bp)...
	[0000][ M::mem_process_seqs] Processed 3122174 reads in 785.954 CPU sec, 20.552 real sec
[0000] Calling mem_process_seqs.., task: 14
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] read_chunk: 400000000, work_chunk_size: 61335534, nseq: 478924
	[0000][ M::kt_pipeline] read 478924 sequences (61335534 bp)...
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 3121616
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (124, 1212390, 75, 123)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (92, 124, 199)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 413)
[0000][PE] mean and std.dev: (130.59, 71.79)
[0000][PE] low and high boundaries for proper pairs: (1, 520)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 382)
[0000][PE] mean and std.dev: (158.47, 67.27)
[0000][PE] low and high boundaries for proper pairs: (1, 473)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (57, 126, 341)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 909)
[0000][PE] mean and std.dev: (175.69, 185.60)
[0000][PE] low and high boundaries for proper pairs: (1, 1193)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (84, 136, 227)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 513)
[0000][PE] mean and std.dev: (152.01, 103.69)
[0000][PE] low and high boundaries for proper pairs: (1, 656)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 3121616 reads in 774.158 CPU sec, 20.414 real sec
[0000] Calling mem_process_seqs.., task: 15
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 689690477, n: 478924
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (20, 190946, 12, 17)
[0000][PE] analyzing insert size distribution for orientation FF...
[0000][PE] (25, 50, 75) percentile: (100, 155, 207)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 421)
[0000][PE] mean and std.dev: (150.37, 64.92)
[0000][PE] low and high boundaries for proper pairs: (1, 528)
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (109, 150, 200)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 382)
[0000][PE] mean and std.dev: (158.51, 67.29)
[0000][PE] low and high boundaries for proper pairs: (1, 473)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (180, 944, 2642)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 7566)
[0000][PE] mean and std.dev: (1537.83, 1601.86)
[0000][PE] low and high boundaries for proper pairs: (1, 10028)
[0000][PE] analyzing insert size distribution for orientation RR...
[0000][PE] (25, 50, 75) percentile: (120, 149, 209)
[0000][PE] low and high boundaries for computing mean and std.dev: (1, 387)
[0000][PE] mean and std.dev: (154.40, 73.09)
[0000][PE] low and high boundaries for proper pairs: (1, 476)
[0000][PE] skip orientation FF
[0000][PE] skip orientation RF
[0000][PE] skip orientation RR
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 478924 reads in 119.287 CPU sec, 3.613 real sec
[0000] read_chunk: 400000000, work_chunk_size: 0, nseq: 0
[0000] read_chunk: 400000000, work_chunk_size: 0, nseq: 0
[0000] Computation ends..
No. of OMP threads: 40
Processor is running @2394.714610 MHz
Runtime profile:

	Time taken for main_mem function: 359.62 sec

	IO times (sec) :
	Reading IO time (reads) avg: 161.19, (161.19, 161.19)
	Writing IO time (SAM) avg: 74.45, (74.45, 74.45)
	Reading IO time (Reference Genome) avg: 1.12, (1.12, 1.12)
	Index read time avg: 0.27, (0.27, 0.27)

	Overall time (sec) (Excluding Index reading time):
	PROCESS() (Total compute time + (read + SAM) IO time) : 358.19
	MEM_PROCESS_SEQ() (Total compute time (Kernel + SAM)), avg: 307.94, (307.94, 307.94)

	 SAM Processing time (sec):
	--WORKER_SAM avg: 155.68, (155.68, 155.68)

	Kernels' compute time (sec):
	Total kernel (smem+sal+bsw) time avg: 147.21, (147.21, 147.21)
		MEM_ALN_CHAIN_FLT avg: 0.00, (0.00, 0.00)
		MEM_ALN_CHAIN_SEED avg: 0.00, (0.00, 0.00)
		ERT_SEED_CHAIN avg: 0.00, (0.00, 0.00)
	LEARNED_SEED_CHAIN avg: 62.19, (62.31, 62.03)
		SMEM compute avg: 0.00, (0.00, 0.00)
		SAL compute avg: 0.00, (0.00, 0.00)
				MEM_SA avg: 0.00, (0.00, 0.00)

		BSW time, avg: 81.40, (81.62, 81.01)

Important parameter settings: 
	BATCH_SIZE: 512
	MAX_SEQ_LEN_REF: 256
	MAX_SEQ_LEN_QER: 128
	MAX_SEQ_LEN8: 128
	SEEDS_PER_READ: 500
	SIMD_WIDTH8 X: 64
	SIMD_WIDTH16 X: 32
	AVG_SEEDS_PER_READ: 64
